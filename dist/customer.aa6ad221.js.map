{"mappings":"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","sources":["src/modules/customer/customer.ts"],"sourcesContent":["import { WFComponent, WFFormComponent } from \"@xatom/core\";\nimport { logout, userAuth } from \"../auth\";\nimport supabase from \"../supbase\";\n\nconst renderLogoutBtn = () => {\n  // Logout button\n  const btn = new WFComponent(`[xa-type=cta-btn]`);\n  btn.on(\"click\", (e) => {\n    e.preventDefault();\n    btn.setTextContent(\"...\");\n    logout();\n  });\n  btn.setTextContent(\"Logga ut\");\n};\n\n// Customer Interface\ninterface Customer {\n  id: string;\n  First_name: string;\n  Last_name: string;\n  gatuadress: string;\n  postnummer: string;\n  postort: string;\n  email: string;\n  phone: string;\n  clearingnumber: number | null;\n  bankaccountnumber: number | null;\n}\n\nexport const customerDetails = async () => {\n  renderLogoutBtn();\n\n  const userId = userAuth.getUser().id;\n  const customerDetailsContainer = new WFComponent(`[xa-type=\"customer-details\"]`);\n  const form = new WFFormComponent<{ clearingnumber: number; bankaccountnumber: number }>(\n    `[xa-type=\"bank-form\"]`\n  );\n\n  let customer: Customer | null = null;\n\n  // Fetch and Render Customer Details\n  try {\n    const { data, error } = await supabase\n      .from(\"Customer\")\n      .select(\"*\")\n      .eq(\"user_id\", userId)\n      .single();\n\n    if (error || !data) {\n      customerDetailsContainer.setHTML(\"<p>No active customer found.</p>\");\n      return;\n    }\n\n    customer = data as Customer;\n\n    // Update Text Content for static fields\n    const { firstname, lastname, adress, postalcode, postalort, uppgiftemail, uppgiftphone } =\n      customerDetailsContainer.getManyChildAsComponents({\n        firstname: \"[xa-type=firstname]\",\n        lastname: \"[xa-type=lastname]\",\n        adress: \"[xa-type=adress]\",\n        postalcode: \"[xa-type=postalcode]\",\n        postalort: \"[xa-type=postalort]\",\n        uppgiftemail: \"[xa-type=uppgiftemail]\",\n        uppgiftphone: \"[xa-type=uppgiftphone]\",\n      });\n\n    firstname.setTextContent(customer.First_name);\n    lastname.setTextContent(customer.Last_name);\n    adress.setTextContent(customer.gatuadress);\n    postalcode.setTextContent(customer.postnummer);\n    postalort.setTextContent(customer.postort);\n    uppgiftemail.setTextContent(customer.email);\n    uppgiftphone.setTextContent(customer.phone);\n\n    // Set input fields for numeric bank details using `value`\n    const clearingInput = document.querySelector<HTMLInputElement>(`[xa-type=\"clearingnumber\"]`);\n    const accountInput = document.querySelector<HTMLInputElement>(`[xa-type=\"bankaccountnumber\"]`);\n\n    if (clearingInput) clearingInput.value = customer.clearingnumber?.toString() || \"\";\n    if (accountInput) accountInput.value = customer.bankaccountnumber?.toString() || \"\";\n\n    \n    form.onFormSubmit(async (formData) => {\n      form.disableForm(); // Disable the form to prevent multiple submissions\n    \n      const clearingNumberValue = formData.clearingnumber;\n      const bankAccountNumberValue = formData.bankaccountnumber;\n    \n      try {\n        const { data: updatedData, error } = await supabase\n          .from(\"Customer\")\n          .update({\n            clearingnumber: clearingNumberValue,\n            bankaccountnumber: bankAccountNumberValue,\n          })\n          .eq(\"user_id\", userId)\n          .select();  // Explicitly select the updated rows\n    \n        if (error) {\n          console.error(\"Error updating customer data:\", error.message);\n          form.showErrorState(); // Custom error message\n        } else {\n          console.log(\"Customer data updated successfully\", updatedData);\n          form.showSuccessState(); // Custom success message\n          \n          const successMessage = document.querySelector<HTMLDivElement>(`[xa-type=\"success-message\"]`);\n          if (successMessage) {\n            successMessage.style.display = \"block\";\n    \n            let countdown = 3;\n            const countdownSpan = document.getElementById(\"countdown\");\n            const interval = setInterval(() => {\n              countdown -= 1;\n              if (countdownSpan) countdownSpan.textContent = countdown.toString();\n    \n              if (countdown <= 0) {\n                clearInterval(interval);\n                location.reload(); // Reload the page after countdown\n              }\n            }, 1000); // Reduce countdown every second\n          }\n        }\n      } catch (updateError) {\n        console.error(\"Error during form submission:\", updateError.message);\n        form.showErrorState();\n      } finally {\n        form.enableForm(); // Re-enable the form after submission\n      }\n    });\n    \n  } catch (error) {\n    console.error(\"Error fetching customer details:\", error);\n    customerDetailsContainer.setHTML(\"<p>Error fetching customer data.</p>\");\n  }\n};\n\ncustomerDetails();"],"names":[],"version":3,"file":"customer.aa6ad221.js.map","sourceRoot":"../"}